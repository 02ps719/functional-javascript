Lift Shoes, or the Spoiled Child Pattern

Over the past few months, I've run into the same design pattern three times.  I'm going to call it the "Spoiled Child Pattern", for reasons that will become clear.

The first time I ran into this, I was writing an OpenLaszlo/JavaScript interpreter for the wonderful Context Free Design Language (CFDL)[1].

CFDG relies heavily on affine transformations.  The OpenLaszlo drawview class doesn't implement transform operators, so I wrote a JavaScript Transform class[2], with scale, transform, skew, and so forth.  Only what I actually needed was the premultiply versions of the operators.  

***

fn1. I haven't had time to finish this, although if you're willing to do a bit of sleuthing you can find a partly-working version --- save to server doesn't work yet.  No, it's no "here":http://foldr.com.  And it's not "this one":http://foldl.com either.

fn2. The WHATWG canvas element does support affine transforms, but not enough to implement CFDG: it's missing skew; and it's also missing a direct API to the transform matrix, so you can't work around the omission.  Also, a CFDG interpreter needs to halt shape expansion based on the pixel coverage of the current shape, so it needs access to the transform matrix in any case so that it can test the termination conditions.


Last week for the first time I did <a href="/tools/rework">some serious browser JavaScript programming</a>.  This is the first time I've done significant JavaScript development without the OpenLaszlo development tools, and I found the state of the tooling world somewhat wanting.

First of all, I'm a read-eval-print-loop kind of guy.  Sit me down with a command-line interface to a expression compiler that executes against the running program, and I'm happy as a clam.  Just like having a responsive human interface makes a variety of interface bugs forgiveable, having an environment that lets you investigate program behavior without starting from scratch each time can more than compensate for the kind of language and API inconsistencies that would otherwise slow you to a crawl.

So I'm not interested in your source-level single-stepper or other visual doo-dad.  I've just founded that time invested in learning
I just want a command-line interface to language 
I  use "a lot of languages":/archives/2005/02/languages, and I've discovered that 


"Teach someone how to use a debugger and you've taught them for a day.  Teach them how to debug and you've taught them for a lifetime."

As don't have to write a lot of scaffolding or click through a lot of actions to recreate program state each time I want to evaluate explore some aspect of the 

