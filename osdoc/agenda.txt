Milestones:
- function f() {}
- C.a = function
- C.prototype.a = function
- render math
- render ::, ==, etc.
- sections
- Functional
- integrate w/ jsdoc
- other libraries
- remove dead code
- update namespace (is protodoc free?)

ObjectDefinition {properties, functions, methods}
FunctionDefinition {source, docstring, parameters, doc}
StringSlice {source, start, end, doc: [DocBlock]}
DocString {blocks: [DocBlock]}
DocBlock = DocBlock.Text | DocBlock.Definition | DocBlock.Test

http://osteele.dev/sources/javascript/osdoc/?source=test.js

base:
///(.*) -> {apidocline}
/** -> block-apidoc
/* -> block-comment
^function name -> {function}
^var name -> {var}
^Name...prototype = function -> {method}
^Name...prototype = -> {member}
^Name... = function -> {classMethod}
^Name... = -> {classMember}

var x = new Y;
function C() {}
C.prototype.x = {
  match: function(args) ...
  },?s\*$

block apidoc:
(.*?)*/ -> {apidocline} base
.* -> {apidocline}

block comment:
*/ -> base

refactor within apidoc as comment

- prototype, scriptaculous, protoscript, yui, jquery, client and server-side libraries, ...

New features:
- document object slots
- recognize class definitions
- recognize nested class definition
- hide private functions

Release checklist:
- w/out prototype
- test in other browsers
- remove dependendency on prototype
- rename to protodoc?

Future:
- command-line version
- roll up class definitions
- recognize subclasses
- show inline docs
- add ToC
- pluggable comment formatters too?
- ToC
- command-line
- other parsers
