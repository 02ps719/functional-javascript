Basic functionality:
- figure out single vs. multiline
- render ::, >>, ==, indent, parbreak
- normalize stuff in comments
- sections
- Functional
- staging
- doctest

Code cleanup:
- hoist parsing for comment types: signature
- remove dead code
- rename -> protodoc
- use standard class mechanism
- use builders
- hoist statemachine initialiation

Completion:
- test on other libraries
- docs

Later:
- optimize statemachine scanner
- make parsers, builders, renderers, paragraph formatter configurable
- clean up format vs. render
- pass in logger

ObjectDefinition {properties, functions, methods}
FunctionDefinition {source, docstring, parameters, doc}
StringSlice {source, start, end, doc: [DocBlock]}
DocString {blocks: [DocBlock]}
DocBlock = DocBlock.Text | DocBlock.Definition | DocBlock.Test

http://osteele.dev/sources/javascript/osdoc/?source=test.js

var x = new Y;
function C() {}
C.prototype.x = {
  match: function(args) ...
  },?s\*$

- prototype, scriptaculous, protoscript, yui, jquery, client and server-side libraries, ...


Release checklist:
- w/out prototype
- test in other browsers

Future:
- document object slots
- pluggable formatters
- command-line version
- roll up class definitions
- recognize subclasses
- show inline docs
- pluggable comment formatters
- ToC
- command-line
- other parsers
- show source
- frames
- option to show all comments
